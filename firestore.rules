/**
 * @fileoverview Firestore Security Rules for the Dulus Business Manager application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user has exclusive
 * access to their own data, including tasks, invoices, clients, and settings.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and
 * simplifying security rules. The Settings document is stored as a subcollection
 * under the user's document.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Listing all users is not allowed.
 * - The rules explicitly deny any unauthorized access attempts.
 *
 * Denormalization for Authorization:
 *  - The data model denormalizes the userId into each subcollection documents, such as Tasks, Invoices and Clients,
 *    avoiding the need for costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own user document.
     * @deny (create) - Unauthenticated user cannot create a user document.
     * @deny (get, update, delete) - Authenticated user cannot access another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /users/{userId}/tasks/{taskId} collection.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) - Authenticated user can create tasks within their own user document.
     * @allow (get, update, delete) - Authenticated user can only access tasks within their own user document.
     * @deny (create) - Unauthenticated user cannot create a task.
     * @deny (get, update, delete) - Authenticated user cannot access another user's tasks.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/tasks/{taskId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /users/{userId}/invoices/{invoiceId} collection.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) - Authenticated user can create invoices within their own user document.
     * @allow (get, update, delete) - Authenticated user can only access invoices within their own user document.
     * @deny (create) - Unauthenticated user cannot create an invoice.
     * @deny (get, update, delete) - Authenticated user cannot access another user's invoices.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/invoices/{invoiceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user can create clients within their own user document.
     * @allow (get, update, delete) - Authenticated user can only access clients within their own user document.
     * @deny (create) - Unauthenticated user cannot create a client.
     * @deny (get, update, delete) - Authenticated user cannot access another user's clients.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Defines rules for the /users/{userId}/settings/{settingsId} collection.
     * @path /users/{userId}/settings/{settingsId}
     * @allow (create) - Authenticated user can create settings within their own user document.
     * @allow (get, update, delete) - Authenticated user can only access settings within their own user document.
     * @deny (create) - Unauthenticated user cannot create a setting.
     * @deny (get, update, delete) - Authenticated user cannot access another user's settings.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/settings/{settingsId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}