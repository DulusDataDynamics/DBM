/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.
 *   All data is nested under /users/{userId}, and users can only access their own data.
 * @data_structure
 *   /users/{userId} - User profile information.
 *   /users/{userId}/tasks/{taskId} - Tasks for a specific user.
 *   /users/{userId}/invoices/{invoiceId} - Invoices for a specific user.
 *   /users/{userId}/clients/{clientId} - Clients for a specific user.
 *   /users/{userId}/settings/{settingsId} - Settings for a specific user (single document).
 *   /users/{userId}/chatSessions/{sessionId} - Chat sessions for a specific user.
 * @key_security_decisions
 *   - Users can only create, read, update, and delete their own data.
 *   - Listing of other users is disallowed.
 *   - Data validation is minimal (prototyping mode). Only authorization-critical fields are validated.
 *   - All write operations require a verified user identity (request.auth != null).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a different ID.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for tasks.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user can create tasks under their user ID.
     * @deny (create) Authenticated user cannot create tasks under another user ID.
     * @allow (get, list, update, delete) Authenticated user can access and modify their own tasks.
     * @deny (get, list, update, delete) Authenticated user cannot access or modify another user's tasks.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for invoices.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create) Authenticated user can create invoices under their user ID.
     * @deny (create) Authenticated user cannot create invoices under another user ID.
     * @allow (get, list, update, delete) Authenticated user can access and modify their own invoices.
     * @deny (get, list, update, delete) Authenticated user cannot access or modify another user's invoices.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) Authenticated user can create clients under their user ID.
     * @deny (create) Authenticated user cannot create clients under another user ID.
     * @allow (get, list, update, delete) Authenticated user can access and modify their own clients.
     * @deny (get, list, update, delete) Authenticated user cannot access or modify another user's clients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for settings.
     * @path /users/{userId}/settings/{settingsId}
     * @allow (create) Authenticated user can create settings under their user ID.
     * @deny (create) Authenticated user cannot create settings under another user ID.
     * @allow (get, update, delete) Authenticated user can access and modify their own settings.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's settings.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/settings/{settingsId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for chat sessions.
     * @path /users/{userId}/chatSessions/{sessionId}
     * @allow (create) Authenticated user can create chat sessions under their user ID.
     * @deny (create) Authenticated user cannot create chat sessions under another user ID.
     * @allow (get, list, update, delete) Authenticated user can access and modify their own chat sessions.
     * @deny (get, list, update, delete) Authenticated user cannot access or modify another user's chat sessions.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chatSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}