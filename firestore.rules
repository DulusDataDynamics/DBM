/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the Dulus Business Manager application.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring that each user's data is isolated.
 * - /users/{userId}: User profile information.
 * - /users/{userId}/tasks/{taskId}: Tasks belonging to a user.
 * - /users/{userId}/invoices/{invoiceId}: Invoices belonging to a user.
 * - /users/{userId}/clients/{clientId}: Clients belonging to a user.
 * - /users/{userId}/settings/{settingsId}: Application settings for a user (a single document).
 * - /users/{userId}/chatSessions/{sessionId}: Chat sessions for a user.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of users is disallowed for privacy.
 * - Read-only access to public data is not supported in this version.
 *
 * Authorization Design:
 * - All data is owned by a specific user, identified by their UID.
 * - Every document under `/users/{userId}` is secured using the `isOwner(userId)` function.
 * - The `isOwner()` function verifies that the authenticated user's UID matches the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the incoming resource data contains the correct owner ID on create.
     */
    function isValidOwnerIdOnCreate(userId) {
        return request.resource.data.userId == userId;
    }

    match /users/{userId} {
      /**
       * @description Manages user profile information.
       * @path /users/{userId}
       * @allow (create) User with UID 'user123' can create their profile.
       * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
       * @principle Enforces document ownership for writes. Allows user to create their own profile.
       */
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/tasks/{taskId} {
      /**
       * @description Manages user tasks.
       * @path /users/{userId}/tasks/{taskId}
       * @allow (create) User with UID 'user123' can create a task under /users/user123/tasks/task123.
       * @deny (create) User with UID 'user456' cannot create a task under /users/user123/tasks/task123.
       * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/invoices/{invoiceId} {
      /**
       * @description Manages user invoices.
       * @path /users/{userId}/invoices/{invoiceId}
       * @allow (create) User with UID 'user123' can create an invoice under /users/user123/invoices/invoice123.
       * @deny (create) User with UID 'user456' cannot create an invoice under /users/user123/invoices/invoice123.
       * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/clients/{clientId} {
      /**
       * @description Manages user clients.
       * @path /users/{userId}/clients/{clientId}
       * @allow (create) User with UID 'user123' can create a client under /users/user123/clients/client123.
       * @deny (create) User with UID 'user456' cannot create a client under /users/user123/clients/client123.
       * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    match /users/{userId}/settings/{settingsId} {
      /**
       * @description Manages user settings. Only one settings document is allowed per user.
       * @path /users/{userId}/settings/{settingsId}
       * @allow (create) User with UID 'user123' can create a settings document under /users/user123/settings/appSettings.
       * @deny (create) User with UID 'user456' cannot create a settings document under /users/user123/settings/appSettings.
       * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
       */
      allow get: if isOwner(userId);
      allow list: if false; // Only a single document, no need to list.

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     match /users/{userId}/chatSessions/{sessionId} {
          /**
           * @description Manages user chat sessions.
           * @path /users/{userId}/chatSessions/{sessionId}
           * @allow (create) User with UID 'user123' can create a chat session under /users/user123/chatSessions/session123.
           * @deny (create) User with UID 'user456' cannot create a chat session under /users/user123/chatSessions/session123.
           * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
           */
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);

          allow create: if isOwner(userId) && isValidOwnerIdOnCreate(userId);
          allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
          allow delete: if isExistingOwner(userId);
      }
  }
}