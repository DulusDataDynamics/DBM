/**
 * @fileoverview Firestore Security Rules for Dulus Business Manager.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access
 * their own data, including profile information, tasks, invoices, clients,
 * settings, and chat sessions. No cross-user access is permitted.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership. Settings
 * are stored as a single document under the /settings subcollection.
 *
 * Key Security Decisions:
 * - Users cannot list other users.
 * - All write operations are restricted to the owner of the data.
 * - The 'Settings' document for each user is treated as user-owned and can only
 *   be accessed by that specific user.
 * - Relational integrity is enforced on create and update operations to
 *   maintain the consistency of user-owned data.
 * - No public listing is enabled for any collections containing user-specific private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection, ensuring users can only access their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile (if userId matches auth.uid).
     * @allow (get, update, delete) - Authenticated user accesses their own profile (if userId matches auth.uid).
     * @deny (create) - If userId does not match auth.uid.
     * @deny (get, update, delete) - If userId does not match auth.uid.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /tasks subcollection under a specific user.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create, get, update, delete, list) - Authenticated user manages their own tasks.
     * @deny (create, get, update, delete, list) - If userId does not match auth.uid.
     * @principle Enforces document ownership for tasks.
     */
    match /users/{userId}/tasks/{taskId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /invoices subcollection under a specific user.
     * @path /users/{userId}/invoices/{invoiceId}
     * @allow (create, get, update, delete, list) - Authenticated user manages their own invoices.
     * @deny (create, get, update, delete, list) - If userId does not match auth.uid.
     * @principle Enforces document ownership for invoices.
     */
    match /users/{userId}/invoices/{invoiceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /clients subcollection under a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, update, delete, list) - Authenticated user manages their own clients.
     * @deny (create, get, update, delete, list) - If userId does not match auth.uid.
     * @principle Enforces document ownership for clients.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /settings document under a specific user. Only one settings document is allowed per user.
     * @path /users/{userId}/settings/{settingsId}
     * @allow (create, get, update, delete) - Authenticated user manages their own settings.
     * @deny (create, get, update, delete) - If userId does not match auth.uid.
     * @principle Enforces document ownership for settings.
     */
    match /users/{userId}/settings/{settingsId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /chatSessions subcollection under a specific user.
     * @path /users/{userId}/chatSessions/{sessionId}
     * @allow (create, get, update, delete, list) - Authenticated user manages their own chat sessions.
     * @deny (create, get, update, delete, list) - If userId does not match auth.uid.
     * @principle Enforces document ownership for chat sessions.
     */
    match /users/{userId}/chatSessions/{sessionId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }
  }
}